{"version":3,"sources":["const.js","store.js","TodoItem.js","TodoList.js","api.js","App.js","index.js"],"names":["TODOS_URL","USERS_URL","TABLE_HEADERS","code","title","type","store","createStore","state","action","Object","objectSpread2","todos","value","currentSortField","TodoItem","_ref","todo","react_default","a","createElement","id","completed","toString","user","TodoList","sortByField","className","map","header","key","onClick","todoItem","src_TodoItem","getDataFromUrl","url","response","regenerator_default","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","connect","dispatch","setTodos","newTodos","setSortField","newSortField","_useState","useState","_useState2","slicedToArray","isLoading","setIsLoading","length","src_TodoList","field","todosCopy","toConsumableArray","sort","b","localeCompare","reverse","disabled","_ref2","_ref3","todosList","usersList","todosWithUsers","Promise","all","find","userId","name","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d34af7be.chunk.js","sourcesContent":["export const TODOS_URL = 'https://jsonplaceholder.typicode.com/todos';\nexport const USERS_URL = 'https://jsonplaceholder.typicode.com/users';\n\nexport const SET_TODOS = 'setTodos';\nexport const SET_SORT_FIELD = 'setSortField';\n\nexport const TABLE_HEADERS = [\n  {\n    code: 'id',\n    title: 'Id',\n    type: 'number',\n  },\n  {\n    code: 'title',\n    title: 'Title',\n    type: 'string',\n  },\n  {\n    code: 'completed',\n    title: 'Completed',\n    type: 'boolean',\n  },\n  {\n    code: 'user',\n    title: 'User',\n    type: 'string',\n  },\n];\n","import { createStore } from 'redux';\nimport { SET_SORT_FIELD, SET_TODOS } from './const';\n\nconst initialState = {\n  todos: [],\n  currentSortField: null,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.value,\n      };\n    case SET_SORT_FIELD:\n      return {\n        ...state,\n        currentSortField: action.value,\n      };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer, initialState);\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({ todo }) => (\n  <tr>\n    <td>{todo.id}</td>\n    <td>{todo.title}</td>\n    <td>{todo.completed.toString()}</td>\n    <td>{todo.user}</td>\n  </tr>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    user: PropTypes.string,\n  }).isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\nimport { TABLE_HEADERS } from './const';\n\nconst TodoList = ({ todos, sortByField }) => (\n  <table className=\"todo\">\n    <thead>\n      <tr>\n        {TABLE_HEADERS.map(header => (\n          <th\n            key={header.code}\n            onClick={() => sortByField(header.code, header.type)}\n          >\n            {header.title}\n          </th>\n        ))}\n      </tr>\n    </thead>\n    <tbody>\n      {todos.map(\n        todoItem => <TodoItem key={todoItem.id} todo={todoItem} />\n      )}\n    </tbody>\n  </table>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  sortByField: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","export const getDataFromUrl = async(url) => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport TodoList from './TodoList';\nimport { SET_TODOS, TODOS_URL, USERS_URL, SET_SORT_FIELD } from './const';\nimport { getDataFromUrl } from './api';\nimport './App.css';\n\nfunction App({ todos, currentSortField, setTodos, setSortField }) {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const setPreparedTodosFromServer = async() => {\n    setIsLoading(true);\n\n    const [todosList, usersList] = await Promise.all(\n      [getDataFromUrl(TODOS_URL), getDataFromUrl(USERS_URL)]\n    );\n\n    const todosWithUsers = todosList.map(\n      todo => ({\n        ...todo,\n        user: usersList.find(user => user.id === todo.userId).name,\n      })\n    );\n\n    setTodos(todosWithUsers);\n    setIsLoading(false);\n  };\n\n  const sortByField = (field, type) => {\n    const todosCopy = [...todos];\n\n    if (currentSortField === field) {\n      setTodos(todosCopy.reverse());\n\n      return;\n    }\n\n    switch (type) {\n      case 'string':\n        todosCopy.sort(\n          (a, b) => a[field].localeCompare(b[field])\n        );\n        break;\n\n      case 'number':\n        todosCopy.sort(\n          (a, b) => a[field] - b[field]\n        );\n        break;\n\n      case 'boolean':\n        todosCopy.sort(\n          (a, b) => a[field].toString().localeCompare(b[field].toString())\n        );\n        break;\n\n      default:\n        todosCopy.sort();\n    }\n\n    setTodos(todosCopy);\n    setSortField(field);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of TODOS</h1>\n      {todos.length > 0\n        ? (\n          <TodoList\n            todos={todos}\n            sortByField={sortByField}\n          />\n        )\n        : (\n          <button\n            disabled={isLoading}\n            type=\"button\"\n            onClick={setPreparedTodosFromServer}\n          >\n            {isLoading ? 'Loading...' : 'Load Todos'}\n          </button>\n        )}\n    </div>\n  );\n}\n\nconst getData = state => ({\n  todos: state.todos,\n  currentSortField: state.currentSortField,\n});\n\nconst getMethods = dispatch => ({\n  setTodos: newTodos => dispatch({\n    type: SET_TODOS,\n    value: newTodos,\n  }),\n  setSortField: newSortField => dispatch({\n    type: SET_SORT_FIELD,\n    value: newSortField,\n  }),\n});\n\nApp.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  currentSortField: PropTypes.string.isRequired,\n  setTodos: PropTypes.func.isRequired,\n  setSortField: PropTypes.func.isRequired,\n};\n\nexport default connect(getData, getMethods)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root')\n);\n"],"sourceRoot":""}